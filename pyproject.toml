[tool.poetry]
name = "flex-config"
version = "2.2.1"
description="Easily configure Python apps via environment variables, YAML, and AWS SSM Param Store."
repository="https://github.com/triaxtec/flex-config"
documentation="https://triaxtec.github.io/flex-config"
keywords=["config", "AWS", "SSM", "serverless", "environment"]
readme = "docs/README.md"
packages = [
    {include = "flex_config"}
]
authors = ["Dylan Anthony <danthony@triaxtec.com>", "Ethan Mann <emann@triaxtec.com>"]
include = ["CHANGELOG.md", "flex_config/py.typed"]
license = "MIT"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Utilities",
]

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.poetry.dependencies]
python = "^3.8"
boto3 = {version = "^1.13.1", optional = true}
pyyaml = {version = "^6.0.1", optional = true}
pydantic = "^1.7.2"
toml = {version = "^0.10.2", optional = true}

[tool.poetry.extras]
aws = ["boto3"]
yaml = ["pyyaml"]
toml = ["toml"]
all = ["boto3", "pyyaml", "toml"]

[tool.poetry.dev-dependencies]
pytest = "*"
pytest-mock = "*"
pytest-cov = "^2.8.1"
mypy = "==0.*"
safety = "*"
black = {version = ">=20.8b1", allow-prereleases = true}
taskipy = "^1.4.0"
isort = "^5.6.4"
mkdocs = "^1.1"
mkdocs-material = "^5.1.5"
markdown-include = "^0.5.1"
mkdocstrings = "^0.11.0"
flake8 = "^3.8.4"
autoflake = "^1.4"
boto3 = "^1.13.1"
bandit = "^1.7.4"
pylint = "^2.15.9"

[tool.taskipy.tasks]
check = "task security && task style && task types && task lint && task lint_tests && task test"
lint = "pylint flex_config"
lint_tests = "pylint --disable=\"R0201,W0201,W0212,W0621,W0404,C0302\" tests"
# Security item #42194 is related to encrypted values in sqlalchemy-utils, which we don't use
security = """
poetry export -f requirements.txt | poetry run safety check --bare --stdin -i 42194 -i 51668\
&& bandit -r flex_config -c pyproject.toml
"""
style = """
autoflake -i -r --expand-star-imports --remove-all-unused-imports --remove-unused-variables --ignore-init-module-imports flex_config tests \
&& isort . \
&& black .
"""
test = "pytest --cov=flex_config --cov-report term-missing"
types = "mypy flex_config"

[tool.bandit]
skips = ["B101"]

[tool.black]
line-length = 120
target_version = ['py38']
exclude = '''
(
  /(
    | \.git
    | \.venv
    | \.mypy_cache
    | openapi_python_client/templates
    | docs
  )/
)
'''

[tool.isort]
line_length = 120
skip = ".venv"
profile = "black"

[tool.pylint.BASIC]
bad-names = ["foo", "bar", "baz", "quux", "toto", "tutu", "tata"]
good-names = ["e", "i", "j", "pk", "T"]

[tool.pylint.FORMAT]
max-line-length = 120

[tool.pylint.MASTER]
ignore = ".git"
jobs = 0

[tool.pylint."MESSAGES CONTROL"]
# C0114 == missing module docstring
# C0115 == missing class docstring
# C0116 == missing function/method docstring
# C0121 == comparison checking for singleton value True
#       Ignored because SQLAlchemy requires `thing != True` instead of
#       `thing is not True` or `not thing`
# C0301 == line too long (covered by flake8)
# C0413 == wrong import position -- let isort fix
# C0415 == import outside toplevel
# E0401 == Import error -- let mypy handle
# E0602 == Undefined variable -- let mypy handle
# E0611 == No name in module -- let mypy handle
# E1101 == No member -- let mypy handle
# E1120 == No value for parameter -- let mypy handle it
# E1125 == Missing kwoa -- let mypy handle
# E1136 == Value is unsubscriptable (covered by mypy)
# R0801 == Duplicated code
# R0903 == Too few public methods
# R1705 == no "elif"/"else" after return statement (Dylan disapproves)
# R1720 == no "elif"/"else" after raise statement (consistency with R1705)
# W0143 == comparing against a callable (may conflict with SQLA)
# W0221 == Parameters differ from overridden method (let mypy handle)
# W0401 == Wildcard import
# W0611 == unused import -- disabled to let autoflake handle
# W0614 == Unused wildcard imports -- used for reexporting
# W1203 == "Use lazy % formatting in logging functions"
#       See https://github.com/PyCQA/pylint/issues/2354#issuecomment-414526879
disable = [
    "C0114", "C0115", "C0116", "C0121", "C0301", "C0413", "C0415",
    "E0012", "E0602", "E0611", "E1101", "E1120", "E1125", "E1136", "E0401",
    "R0801", "R0903", "R1705", "R1720",
    "W0143", "W0221", "W0401", "W0611", "W0614", "W1203",
    # Temporarily disabled to focus on other things
    "R0901", "R0902", "R0904", "R0911", "R0912", "R0913", "R0914", "R0915", "W0511",
    # Circular dependencies - WAY too many false positives, is caught by tests/QA anyways
    "R0401"
]

[tool.pylint.variables]
dummy-variables = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "(_.*|^ignored_.+|^unused_.+|^mock_.+|^setup_database$|^freezer$)"
